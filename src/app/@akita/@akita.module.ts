import { NgModule, ModuleWithProviders } from '@angular/core';
import { environment } from 'src/environments/environment';
import { SharedModule } from '@shared/shared.module';
import {
  AuthMockService,
  NotificationMockService,
  LayoutMockService,
  HotInfoMockService,
  GameTypeMockService,
  OverviewMockService,
  TrialMockService,
  MemberLevelMockService,
  GroupAccountTypeMockService,
  DiscountSettingMockService,
  TransactionTypeMockService,
  StatisticsMockService,
  CommissionSettingMockService,
  FunctionSwitchMockService,
  FunctionEnableSwitchMockService,
  MemberMockService,
  OrderMockService,
  BonusSettingMockService,
  AgentMockService,
  OnlinePaymentTypeMockService,
} from './mock';
import {
  AuthQuery,
  NotificationQuery,
  LayoutQuery,
  MenuQuery,
  HotInfoQuery,
  GameTypeQuery,
  OverviewQuery,
  TrialQuery,
  MemberLevelQuery,
  GroupAccountTypeQuery,
  CommissionSettingQuery,
  DiscountSettingQuery,
  TransactionTypeQuery,
  StatisticsQuery,
  FunctionSwitchQuery,
  FunctionEnableSwitchQuery,
  MemberQuery,
  OrderQuery,
  BonusSettingQuery,
  AgentQuery,
  OnlinePaymentTypeQuery,
} from './queries';
import {
  AuthService,
  NotificationService,
  LayoutService,
  MenuService,
  HotInfoService,
  GameTypeService,
  OverviewService,
  TrialService,
  MemberLevelService,
  GroupAccountTypeService,
  CommissionSettingService,
  DiscountSettingService,
  TransactionTypeService,
  StatisticsService,
  FunctionSwitchService,
  FunctionEnableSwitchService,
  MemberService,
  OrderService,
  BonusSettingService,
  AgentService,
  OnlinePaymentTypeService,
} from './services';
import {
  AuthStore,
  NotificationStore,
  LayoutStore,
  MenuStore,
  HotInfoStore,
  GameTypeStore,
  OverviewStore,
  TrialStore,
  MemberLevelStore,
  GroupAccountTypeStore,
  CommissionSettingStore,
  DiscountSettingStore,
  TransactionTypeStore,
  StatisticsStore,
  FunctionSwitchStore,
  FunctionEnableSwitchStore,
  MemberStore,
  OrderStore,
  BonusSettingStore,
  AgentStore,
  OnlinePaymentTypeStore,
} from './stores';

const useMock = environment.mock;
const PROVIDERS = [
  LayoutStore,
  LayoutQuery,
  AuthStore,
  AuthQuery,
  MenuStore,
  MenuQuery,
  NotificationStore,
  NotificationQuery,
  HotInfoStore,
  HotInfoQuery,
  GameTypeStore,
  GameTypeQuery,
  OverviewStore,
  OverviewQuery,
  TrialQuery,
  TrialStore,
  MemberLevelStore,
  MemberLevelQuery,
  GroupAccountTypeStore,
  GroupAccountTypeQuery,
  CommissionSettingQuery,
  CommissionSettingStore,
  DiscountSettingStore,
  DiscountSettingQuery,
  TransactionTypeQuery,
  TransactionTypeStore,
  StatisticsQuery,
  StatisticsStore,
  FunctionSwitchQuery,
  FunctionSwitchStore,
  FunctionEnableSwitchQuery,
  FunctionEnableSwitchStore,
  MemberQuery,
  MemberStore,
  OrderQuery,
  OrderStore,
  BonusSettingQuery,
  BonusSettingStore,
  AgentQuery,
  AgentStore,
  OnlinePaymentTypeQuery,
  OnlinePaymentTypeStore,
  { provide: LayoutService, useClass: useMock ? LayoutMockService : LayoutService },
  { provide: AuthService, useClass: useMock ? AuthMockService : AuthService },
  MenuService,
  { provide: NotificationService, useClass: useMock ? NotificationMockService : NotificationService },
  { provide: HotInfoService, useClass: useMock ? HotInfoMockService : HotInfoService },
  { provide: GameTypeService, useClass: useMock ? GameTypeMockService : GameTypeService },
  { provide: OverviewService, useClass: useMock ? OverviewMockService : OverviewService },
  { provide: TrialService, useClass: useMock ? TrialMockService : TrialService },
  { provide: MemberLevelService, useClass: useMock ? MemberLevelMockService : MemberLevelService },
  { provide: GroupAccountTypeService, useClass: useMock ? GroupAccountTypeMockService : GroupAccountTypeService },
  { provide: CommissionSettingService, useClass: useMock ? CommissionSettingMockService : CommissionSettingService },
  { provide: DiscountSettingService, useClass: useMock ? DiscountSettingMockService : DiscountSettingService },
  { provide: TransactionTypeService, useClass: useMock ? TransactionTypeMockService : TransactionTypeService },
  { provide: StatisticsService, useClass: useMock ? StatisticsMockService : StatisticsService },
  { provide: FunctionSwitchService, useClass: useMock ? FunctionSwitchMockService : FunctionSwitchService },
  { provide: FunctionEnableSwitchService, useClass: useMock ? FunctionEnableSwitchMockService : FunctionEnableSwitchService },
  { provide: MemberService, useClass: useMock ? MemberMockService : MemberService },
  { provide: OrderService, useClass: useMock ? OrderMockService : OrderService },
  { provide: BonusSettingService, useClass: useMock ? BonusSettingMockService : BonusSettingService },
  { provide: AgentService, useClass: useMock ? AgentMockService : AgentService },
  { provide: OnlinePaymentTypeService, useClass: useMock ? OnlinePaymentTypeMockService : OnlinePaymentTypeService },
];

@NgModule({
  declarations: [],
  imports: [
    SharedModule,
  ],
})
export class AkitaModule {
  static forRoot(): ModuleWithProviders {
    return <ModuleWithProviders>{
      ngModule: AkitaModule,
      providers: [
        ...PROVIDERS,
      ],
    };
  }
}
